// Code generated by MockGen. DO NOT EDIT.
// Source: user_first_ac_submission_interactor.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "diff-problems/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserFirstAcSubmissionUpdatedAtRepository is a mock of UserFirstAcSubmissionUpdatedAtRepository interface.
type MockUserFirstAcSubmissionUpdatedAtRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder
}

// MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder is the mock recorder for MockUserFirstAcSubmissionUpdatedAtRepository.
type MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder struct {
	mock *MockUserFirstAcSubmissionUpdatedAtRepository
}

// NewMockUserFirstAcSubmissionUpdatedAtRepository creates a new mock instance.
func NewMockUserFirstAcSubmissionUpdatedAtRepository(ctrl *gomock.Controller) *MockUserFirstAcSubmissionUpdatedAtRepository {
	mock := &MockUserFirstAcSubmissionUpdatedAtRepository{ctrl: ctrl}
	mock.recorder = &MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFirstAcSubmissionUpdatedAtRepository) EXPECT() *MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserFirstAcSubmissionUpdatedAtRepository) Get() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserFirstAcSubmissionUpdatedAtRepository)(nil).Get))
}

// Update mocks base method.
func (m *MockUserFirstAcSubmissionUpdatedAtRepository) Update(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserFirstAcSubmissionUpdatedAtRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserFirstAcSubmissionUpdatedAtRepository)(nil).Update), arg0)
}

// MockUserFirstAcSubmissionRepository is a mock of UserFirstAcSubmissionRepository interface.
type MockUserFirstAcSubmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFirstAcSubmissionRepositoryMockRecorder
}

// MockUserFirstAcSubmissionRepositoryMockRecorder is the mock recorder for MockUserFirstAcSubmissionRepository.
type MockUserFirstAcSubmissionRepositoryMockRecorder struct {
	mock *MockUserFirstAcSubmissionRepository
}

// NewMockUserFirstAcSubmissionRepository creates a new mock instance.
func NewMockUserFirstAcSubmissionRepository(ctrl *gomock.Controller) *MockUserFirstAcSubmissionRepository {
	mock := &MockUserFirstAcSubmissionRepository{ctrl: ctrl}
	mock.recorder = &MockUserFirstAcSubmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFirstAcSubmissionRepository) EXPECT() *MockUserFirstAcSubmissionRepositoryMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method.
func (m *MockUserFirstAcSubmissionRepository) BulkUpsert(arg0 entity.AcUserSubmissionList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert.
func (mr *MockUserFirstAcSubmissionRepositoryMockRecorder) BulkUpsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockUserFirstAcSubmissionRepository)(nil).BulkUpsert), arg0)
}

// MockUserSubmissionAtCoderProblemClient is a mock of UserSubmissionAtCoderProblemClient interface.
type MockUserSubmissionAtCoderProblemClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserSubmissionAtCoderProblemClientMockRecorder
}

// MockUserSubmissionAtCoderProblemClientMockRecorder is the mock recorder for MockUserSubmissionAtCoderProblemClient.
type MockUserSubmissionAtCoderProblemClientMockRecorder struct {
	mock *MockUserSubmissionAtCoderProblemClient
}

// NewMockUserSubmissionAtCoderProblemClient creates a new mock instance.
func NewMockUserSubmissionAtCoderProblemClient(ctrl *gomock.Controller) *MockUserSubmissionAtCoderProblemClient {
	mock := &MockUserSubmissionAtCoderProblemClient{ctrl: ctrl}
	mock.recorder = &MockUserSubmissionAtCoderProblemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSubmissionAtCoderProblemClient) EXPECT() *MockUserSubmissionAtCoderProblemClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockUserSubmissionAtCoderProblemClient) Fetch(arg0 int64) (entity.UserSubmissionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(entity.UserSubmissionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockUserSubmissionAtCoderProblemClientMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUserSubmissionAtCoderProblemClient)(nil).Fetch), arg0)
}
