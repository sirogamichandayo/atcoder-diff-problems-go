// Code generated by MockGen. DO NOT EDIT.
// Source: scrape_handler.go

// Package web is a generated GoMock package.
package web

import (
	web "diff-problems/interfaces/web"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScrapeHandler is a mock of ScrapeHandler interface.
type MockScrapeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeHandlerMockRecorder
}

// MockScrapeHandlerMockRecorder is the mock recorder for MockScrapeHandler.
type MockScrapeHandlerMockRecorder struct {
	mock *MockScrapeHandler
}

// NewMockScrapeHandler creates a new mock instance.
func NewMockScrapeHandler(ctrl *gomock.Controller) *MockScrapeHandler {
	mock := &MockScrapeHandler{ctrl: ctrl}
	mock.recorder = &MockScrapeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeHandler) EXPECT() *MockScrapeHandlerMockRecorder {
	return m.recorder
}

// NewDocument mocks base method.
func (m *MockScrapeHandler) NewDocument(url string) (web.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDocument", url)
	ret0, _ := ret[0].(web.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDocument indicates an expected call of NewDocument.
func (mr *MockScrapeHandlerMockRecorder) NewDocument(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDocument", reflect.TypeOf((*MockScrapeHandler)(nil).NewDocument), url)
}

// MockDocument is a mock of Document interface.
type MockDocument struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentMockRecorder
}

// MockDocumentMockRecorder is the mock recorder for MockDocument.
type MockDocumentMockRecorder struct {
	mock *MockDocument
}

// NewMockDocument creates a new mock instance.
func NewMockDocument(ctrl *gomock.Controller) *MockDocument {
	mock := &MockDocument{ctrl: ctrl}
	mock.recorder = &MockDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocument) EXPECT() *MockDocumentMockRecorder {
	return m.recorder
}

// Attr mocks base method.
func (m *MockDocument) Attr(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attr", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Attr indicates an expected call of Attr.
func (mr *MockDocumentMockRecorder) Attr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attr", reflect.TypeOf((*MockDocument)(nil).Attr), arg0)
}

// Find mocks base method.
func (m *MockDocument) Find(selector string) web.Selection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", selector)
	ret0, _ := ret[0].(web.Selection)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockDocumentMockRecorder) Find(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDocument)(nil).Find), selector)
}

// Text mocks base method.
func (m *MockDocument) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockDocumentMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockDocument)(nil).Text))
}

// MockSelection is a mock of Selection interface.
type MockSelection struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionMockRecorder
}

// MockSelectionMockRecorder is the mock recorder for MockSelection.
type MockSelectionMockRecorder struct {
	mock *MockSelection
}

// NewMockSelection creates a new mock instance.
func NewMockSelection(ctrl *gomock.Controller) *MockSelection {
	mock := &MockSelection{ctrl: ctrl}
	mock.recorder = &MockSelectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelection) EXPECT() *MockSelectionMockRecorder {
	return m.recorder
}

// Attr mocks base method.
func (m *MockSelection) Attr(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attr", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Attr indicates an expected call of Attr.
func (mr *MockSelectionMockRecorder) Attr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attr", reflect.TypeOf((*MockSelection)(nil).Attr), arg0)
}

// Find mocks base method.
func (m *MockSelection) Find(selector string) web.Selection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", selector)
	ret0, _ := ret[0].(web.Selection)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockSelectionMockRecorder) Find(selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSelection)(nil).Find), selector)
}

// Text mocks base method.
func (m *MockSelection) Text() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	return ret0
}

// Text indicates an expected call of Text.
func (mr *MockSelectionMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockSelection)(nil).Text))
}
