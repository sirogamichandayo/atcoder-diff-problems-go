// Code generated by MockGen. DO NOT EDIT.
// Source: contest_result_client.go

// Package client is a generated GoMock package.
package client

import (
	vo "diff-problems/domain/vo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContestResultClient is a mock of ContestResultClient interface.
type MockContestResultClient struct {
	ctrl     *gomock.Controller
	recorder *MockContestResultClientMockRecorder
}

// MockContestResultClientMockRecorder is the mock recorder for MockContestResultClient.
type MockContestResultClientMockRecorder struct {
	mock *MockContestResultClient
}

// NewMockContestResultClient creates a new mock instance.
func NewMockContestResultClient(ctrl *gomock.Controller) *MockContestResultClient {
	mock := &MockContestResultClient{ctrl: ctrl}
	mock.recorder = &MockContestResultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestResultClient) EXPECT() *MockContestResultClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockContestResultClient) All(arg0 string) (vo.ContestResultList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(vo.ContestResultList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockContestResultClientMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockContestResultClient)(nil).All), arg0)
}
