// Code generated by MockGen. DO NOT EDIT.
// Source: calc_user_solve_difficulty_sum_service.go

// Package service is a generated GoMock package.
package service

import (
	entity "diff-problems/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalcUserSolveProblemDifficultySumService is a mock of CalcUserSolveProblemDifficultySumService interface.
type MockCalcUserSolveProblemDifficultySumService struct {
	ctrl     *gomock.Controller
	recorder *MockCalcUserSolveProblemDifficultySumServiceMockRecorder
}

// MockCalcUserSolveProblemDifficultySumServiceMockRecorder is the mock recorder for MockCalcUserSolveProblemDifficultySumService.
type MockCalcUserSolveProblemDifficultySumServiceMockRecorder struct {
	mock *MockCalcUserSolveProblemDifficultySumService
}

// NewMockCalcUserSolveProblemDifficultySumService creates a new mock instance.
func NewMockCalcUserSolveProblemDifficultySumService(ctrl *gomock.Controller) *MockCalcUserSolveProblemDifficultySumService {
	mock := &MockCalcUserSolveProblemDifficultySumService{ctrl: ctrl}
	mock.recorder = &MockCalcUserSolveProblemDifficultySumServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalcUserSolveProblemDifficultySumService) EXPECT() *MockCalcUserSolveProblemDifficultySumServiceMockRecorder {
	return m.recorder
}

// Calc mocks base method.
func (m *MockCalcUserSolveProblemDifficultySumService) Calc() (entity.UserSolveProblemDifficultySumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calc")
	ret0, _ := ret[0].(entity.UserSolveProblemDifficultySumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calc indicates an expected call of Calc.
func (mr *MockCalcUserSolveProblemDifficultySumServiceMockRecorder) Calc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calc", reflect.TypeOf((*MockCalcUserSolveProblemDifficultySumService)(nil).Calc))
}
