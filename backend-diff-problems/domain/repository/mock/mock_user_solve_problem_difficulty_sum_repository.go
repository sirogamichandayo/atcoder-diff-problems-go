// Code generated by MockGen. DO NOT EDIT.
// Source: user_solve_problem_difficulty_sum_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "diff-problems/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserSolveProblemDifficultySumRepository is a mock of UserSolveProblemDifficultySumRepository interface.
type MockUserSolveProblemDifficultySumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSolveProblemDifficultySumRepositoryMockRecorder
}

// MockUserSolveProblemDifficultySumRepositoryMockRecorder is the mock recorder for MockUserSolveProblemDifficultySumRepository.
type MockUserSolveProblemDifficultySumRepositoryMockRecorder struct {
	mock *MockUserSolveProblemDifficultySumRepository
}

// NewMockUserSolveProblemDifficultySumRepository creates a new mock instance.
func NewMockUserSolveProblemDifficultySumRepository(ctrl *gomock.Controller) *MockUserSolveProblemDifficultySumRepository {
	mock := &MockUserSolveProblemDifficultySumRepository{ctrl: ctrl}
	mock.recorder = &MockUserSolveProblemDifficultySumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSolveProblemDifficultySumRepository) EXPECT() *MockUserSolveProblemDifficultySumRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockUserSolveProblemDifficultySumRepository) All() (entity.UserSolveProblemDifficultySumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(entity.UserSolveProblemDifficultySumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockUserSolveProblemDifficultySumRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUserSolveProblemDifficultySumRepository)(nil).All))
}

// FindById mocks base method.
func (m *MockUserSolveProblemDifficultySumRepository) FindById(arg0 string) (entity.UserSolveProblemDifficultySum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(entity.UserSolveProblemDifficultySum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserSolveProblemDifficultySumRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserSolveProblemDifficultySumRepository)(nil).FindById), arg0)
}

// Upsert mocks base method.
func (m *MockUserSolveProblemDifficultySumRepository) Upsert(arg0 entity.UserSolveProblemDifficultySumList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserSolveProblemDifficultySumRepositoryMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserSolveProblemDifficultySumRepository)(nil).Upsert), arg0)
}
